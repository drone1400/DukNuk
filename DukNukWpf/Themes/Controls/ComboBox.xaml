<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
                    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
                    xmlns:controls="clr-namespace:DukNuk.Wpf.Controls"
                    mc:Ignorable="d">
    <d:ResourceDictionary.MergedDictionaries>
        <ResourceDictionary
            Source="pack://application:,,,/DukNukWpf;component/Themes/ThemeColors/DefaultBlue.xaml" />
        <ResourceDictionary
            Source="pack://application:,,,/DukNukWpf;component/Themes/ThemeSizes.xaml" />
    </d:ResourceDictionary.MergedDictionaries>

    <Style 
        x:Key="DukNuk.Style.ComboBox.ToggleButton" 
        TargetType="{x:Type ToggleButton}">
        <Setter Property="Background" Value="{DynamicResource DukNuk.Colors.Brush.Background.Medium}" />
        <Setter Property="BorderBrush" Value="{DynamicResource DukNuk.Colors.Brush.Border.Light}" />
        <Setter Property="Foreground" Value="{DynamicResource DukNuk.Colors.Brush.Text.Light}" />
        <Setter Property="BorderThickness" Value="{DynamicResource DukNuk.Size.Generic.ControlBorderThickness}" />
        
        <Setter Property="Padding" Value="0" />
        <Setter Property="Margin" Value="0" />
        <Setter Property="Height" Value="Auto" />
        <Setter Property="Width" Value="Auto" />

        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />

        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Setter Property="IsTabStop" Value="false" />
        <Setter Property="Focusable" Value="false" />
        <Setter Property="ClickMode" Value="Press" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border x:Name="border"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Background="{TemplateBinding Background}"
                            Effect="{DynamicResource DukNuk.Colors.Glow.Control}"
                            CornerRadius="{DynamicResource DukNuk.Size.Generic.ControlCornerRadius}">
                        <Border x:Name="toggleBorder"
                                HorizontalAlignment="Right"
                                Width="{DynamicResource DukNuk.Size.ComboBox.ToggleWidth}"
                                Margin="1"
                                BorderThickness="0"
                                BorderBrush="Transparent"
                                Background="{DynamicResource DukNuk.Colors.Brush.Background.Light}"
                                CornerRadius="{DynamicResource DukNuk.Size.Generic.ControlCornerRadius}">
                            <Path Data="{DynamicResource DukNuk.Size.ComboBox.ArrowDownGeometry}"
                                  VerticalAlignment="Center"
                                  HorizontalAlignment="Center"
                                  Margin="6"
                                  Stretch="Uniform"
                                  Fill="{DynamicResource DukNuk.Colors.Brush.Text.Dark}" />
                        </Border>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="Background" TargetName="toggleBorder"
                                    Value="{DynamicResource DukNuk.Colors.Brush.Border.Light.Bright}" />
                        </Trigger>
                        <DataTrigger Binding="{Binding Path=IsMouseOver, RelativeSource={RelativeSource TemplatedParent}}" Value="True">
                            <Setter Property="Effect" TargetName="border"
                                    Value="{DynamicResource DukNuk.Colors.Glow.Control.MouseOver}" />
                            <Setter Property="BorderBrush"
                                    Value="{DynamicResource DukNuk.Colors.Brush.Border.MouseOver}" />
                        </DataTrigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Effect" TargetName="border"
                                    Value="{DynamicResource DukNuk.Colors.Glow.Control.MouseOver}" />
                            <Setter Property="BorderBrush"
                                    Value="{DynamicResource DukNuk.Colors.Brush.Border.MouseOver}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Effect" TargetName="border"
                                    Value="{DynamicResource DukNuk.Colors.Glow.Control.MouseOver}" />
                            <Setter Property="BorderBrush"
                                    Value="{DynamicResource DukNuk.Colors.Brush.Border.MouseOver}" />
                            <Setter Property="Background"
                                    Value="{DynamicResource DukNuk.Colors.Brush.Background.Dark}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Effect" TargetName="border"
                                    Value="{DynamicResource DukNuk.Colors.Glow.Control.Disabled}" />
                            <Setter Property="BorderBrush"
                                    Value="{DynamicResource DukNuk.Colors.Brush.Border.Disabled}" />
                            <Setter Property="Background"
                                    Value="{DynamicResource DukNuk.Colors.Brush.Background.Disabled}" />
                            <Setter Property="Background" TargetName="toggleBorder"
                                    Value="{DynamicResource DukNuk.Colors.Brush.Background.DisabledBright}" />
                            <Setter Property="Foreground"
                                    Value="{DynamicResource DukNuk.Colors.Brush.Text.Light.Disabled}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <ControlTemplate 
        x:Key="DukNuk.Style.ComboBoxTemplate" 
        TargetType="{x:Type ComboBox}">
        <Grid>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="{DynamicResource DukNuk.Size.ComboBox.ToggleWidthGridLength}" />
            </Grid.ColumnDefinitions>
            <Popup x:Name="PART_Popup" Grid.Column="0" Grid.ColumnSpan="2" 
                   Width="{TemplateBinding ActualWidth}"
                   AllowsTransparency="true"
                   Margin="1"
                   Placement="Bottom"
                   IsOpen="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                   PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}">
                <Border x:Name="dropDownBorder"
                        Background="{DynamicResource DukNuk.Colors.Brush.Background.Dark}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        Effect="{DynamicResource DukNuk.Colors.Glow.Control}"
                        CornerRadius="{DynamicResource DukNuk.Size.Generic.ControlCornerRadius}">
                    <controls:NukScrollViewer x:Name="DropDownScrollViewer">
                        <Grid x:Name="grid" RenderOptions.ClearTypeHint="Enabled">
                            <ItemsPresenter x:Name="ItemsPresenter"
                                            KeyboardNavigation.DirectionalNavigation="Contained" />
                        </Grid>
                    </controls:NukScrollViewer>
                </Border>
            </Popup>
            <ToggleButton x:Name="toggleButton"
                          Grid.Column="0" Grid.ColumnSpan="2"
                          IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                          Style="{DynamicResource DukNuk.Style.ComboBox.ToggleButton}" 
                          BorderThickness="{TemplateBinding BorderThickness}"
                          BorderBrush="{TemplateBinding BorderBrush}"
                          HorizontalAlignment="{TemplateBinding HorizontalAlignment}"
                          VerticalAlignment="{TemplateBinding VerticalAlignment}"
                          HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                          VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"/>
            <ContentPresenter Grid.Column="0" x:Name="contentPresenter"
                              ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}"
                              ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"
                              ContentStringFormat="{TemplateBinding SelectionBoxItemStringFormat}"
                              Content="{TemplateBinding SelectionBoxItem}"
                              IsHitTestVisible="false"
                              Margin="{TemplateBinding Padding}"
                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" />
        </Grid>

        <ControlTemplate.Triggers>
            <Trigger Property="HasItems" Value="false">
                <Setter Property="Height" TargetName="dropDownBorder" Value="99" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="BorderBrush"
                        Value="{DynamicResource DukNuk.Colors.Brush.Border.Disabled}" />
                <Setter Property="Background"
                        Value="{DynamicResource DukNuk.Colors.Brush.Background.Disabled}" />
                <Setter Property="Foreground"
                        Value="{DynamicResource DukNuk.Colors.Brush.Text.Light.Disabled}" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsGrouping" Value="true" />
                    <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false" />
                </MultiTrigger.Conditions>
                <Setter Property="ScrollViewer.CanContentScroll" Value="false" />
            </MultiTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate 
        x:Key="DukNuk.Style.EditableComboBoxTemplate" 
        TargetType="{x:Type ComboBox}">
        <Grid>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="{DynamicResource DukNuk.Size.ComboBox.ToggleWidthGridLength}" />
            </Grid.ColumnDefinitions>

            <Popup x:Name="PART_Popup" Grid.Column="0" Grid.ColumnSpan="2"
                   Width="{TemplateBinding ActualWidth}"
                   AllowsTransparency="true"
                   Margin="1"
                   Placement="Bottom"
                   IsOpen="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                   PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}">
                <Border x:Name="dropDownBorder"
                        Background="{DynamicResource DukNuk.Colors.Brush.Background.Dark}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        Effect="{DynamicResource DukNuk.Colors.Glow.Control}"
                        CornerRadius="{DynamicResource DukNuk.Size.Generic.ControlCornerRadius}">
                    <controls:NukScrollViewer x:Name="DropDownScrollViewer">
                        <Grid x:Name="grid" RenderOptions.ClearTypeHint="Enabled">
                            <ItemsPresenter x:Name="ItemsPresenter"
                                            KeyboardNavigation.DirectionalNavigation="Contained" />
                        </Grid>
                    </controls:NukScrollViewer>
                </Border>
            </Popup>
            <ToggleButton x:Name="toggleButton"
                          Grid.Column="0" Grid.ColumnSpan="2"
                          IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                          Style="{DynamicResource DukNuk.Style.ComboBox.ToggleButton}" />
            <TextBox x:Name="PART_EditableTextBox"
                     Grid.Column="0"
                     BorderThickness="0"
                     FocusVisualStyle="{x:Null}"
                     IsReadOnly="{Binding IsReadOnly, RelativeSource={RelativeSource TemplatedParent}}"
                     Margin="{TemplateBinding Padding}"
                     Background="Transparent"
                     BorderBrush="Transparent"
                     HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                     VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" />
            <Border Grid.Column="0" Grid.ColumnSpan="2" x:Name="borderFocus" Visibility="Hidden"
                    Style="{DynamicResource DukNuk.Style.FocusVisual.Border}"
                    Margin="0"
                />
        </Grid>

        <ControlTemplate.Triggers>
            <Trigger Property="HasItems" Value="false">
                <Setter Property="Height" TargetName="dropDownBorder" Value="99" />
            </Trigger>
            <DataTrigger Binding="{Binding IsKeyboardFocused, ElementName=PART_EditableTextBox}"
                         Value="true">
                <Setter Property="Visibility" TargetName="borderFocus"
                        Value="Visible" />
            </DataTrigger>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="BorderBrush"
                        Value="{DynamicResource DukNuk.Colors.Brush.Border.Disabled}" />
                <Setter Property="Background"
                        Value="{DynamicResource DukNuk.Colors.Brush.Background.Disabled}" />
                <Setter Property="Foreground"
                        Value="{DynamicResource DukNuk.Colors.Brush.Text.Light.Disabled}" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsGrouping" Value="true" />
                    <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false" />
                </MultiTrigger.Conditions>
                <Setter Property="ScrollViewer.CanContentScroll" Value="false" />
            </MultiTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style 
        x:Key="DukNuk.Style.ComboBox"
        TargetType="{x:Type ComboBox}">
        <Setter Property="FocusVisualStyle" Value="{DynamicResource DukNuk.Style.FocusVisual}"/>
        
        <Setter Property="Background" Value="{DynamicResource DukNuk.Colors.Brush.Background.Medium}" />
        <Setter Property="BorderBrush" Value="{DynamicResource DukNuk.Colors.Brush.Border.Light}" />
        <Setter Property="Foreground" Value="{DynamicResource DukNuk.Colors.Brush.Text.Light}" />
        <Setter Property="BorderThickness" Value="{DynamicResource DukNuk.Size.Generic.ControlBorderThickness}" />

        <Setter Property="Padding" Value="6,3,6,3" />
        <Setter Property="Margin" Value="{DynamicResource DukNuk.Size.Generic.ControlMargin}" />
        <Setter Property="Height" Value="{DynamicResource DukNuk.Size.Generic.ButtonHeight}" />
        <Setter Property="Width" Value="Auto" />

        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />

        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto" />
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
        <Setter Property="ScrollViewer.CanContentScroll" Value="true" />
        <Setter Property="ScrollViewer.PanningMode" Value="Both" />
        <Setter Property="Stylus.IsFlicksEnabled" Value="False" />

        <Setter Property="Template" Value="{DynamicResource DukNuk.Style.ComboBoxTemplate}" />
        <Style.Triggers>
            <Trigger Property="IsEditable" Value="true">
                <Setter Property="IsTabStop" Value="false" />
                <Setter Property="Padding" Value="2" />
                <Setter Property="Template" Value="{DynamicResource DukNuk.Style.EditableComboBoxTemplate}" />
            </Trigger>
        </Style.Triggers>
    </Style>
    
    <Style
        x:Key="DukNuk.Style.ComboBoxItem" 
        TargetType="{x:Type ComboBoxItem}">
        <Setter Property="FocusVisualStyle" Value="{DynamicResource DukNuk.Style.FocusVisual}"/>
        
        <Setter Property="Foreground" Value="{DynamicResource DukNuk.Colors.Brush.Text.Light}" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="BorderThickness" Value="{DynamicResource DukNuk.Size.Generic.ControlBorderThickness}" />

        <Setter Property="HorizontalContentAlignment"
                Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
        <Setter Property="VerticalContentAlignment"
                Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />

        <Setter Property="Padding" Value="4,1" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBoxItem}">
                    <Border x:Name="border"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Background="{TemplateBinding Background}"
                            Padding="{TemplateBinding Padding}"
                            CornerRadius="{DynamicResource DukNuk.Size.Generic.ControlCornerRadius}">
                        <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter Property="BorderBrush"
                                    Value="{DynamicResource DukNuk.Colors.Brush.Border.Light.Bright}" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="BorderBrush"
                                    Value="{DynamicResource DukNuk.Colors.Brush.Border.MouseOver}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="TextElement.Foreground" TargetName="border"
                                    Value="{DynamicResource DukNuk.Colors.Brush.Text.Light.Disabled}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

</ResourceDictionary>