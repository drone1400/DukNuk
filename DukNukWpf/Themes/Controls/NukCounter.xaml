<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
                    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
                    xmlns:controls="clr-namespace:DukNuk.Wpf.Controls"
                    xmlns:converters="clr-namespace:DukNuk.Wpf.Themes.Converters"
                    mc:Ignorable="d">
    <d:ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="pack://application:,,,/DukNukWpf;component/Themes/ThemeColors/DefaultBlue.xaml" />
        <ResourceDictionary Source="pack://application:,,,/DukNukWpf;component/Themes/ThemeSizes.xaml" />
    </d:ResourceDictionary.MergedDictionaries>

    <converters:NukBoolToVisibilityConverter x:Key="DukNuk.Converter.Bool2Vis" />

    <Style
        x:Key="DukNuk.Style.NukCounter.Button"
        TargetType="{x:Type Button}">
        <Setter Property="HorizontalAlignment" Value="Center" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Margin" Value="0" />
        <Setter Property="Padding" Value="1" />
        <Setter Property="Focusable" Value="false" />
        <Setter Property="IsTabStop" Value="false" />
        <Setter Property="Width" Value="{DynamicResource DukNuk.Size.NukCounter.Button.Width}" />
        <Setter Property="Height" Value="{DynamicResource DukNuk.Size.NukCounter.Button.Height}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid>
                        <Ellipse
                            x:Name="border"
                            StrokeThickness="{DynamicResource DukNuk.Size.Generic.ControlStrokeThickness}"
                            Stroke="{DynamicResource DukNuk.Colors.Brush.Border.Light}"
                            Fill="{DynamicResource DukNuk.Colors.Brush.Background.Medium}"
                            HorizontalAlignment="Stretch"
                            VerticalAlignment="Stretch"
                            Effect="{DynamicResource DukNuk.Colors.Glow.Control}" />
                        <!-- Put content presenter over border instead of inside it so it doesn't get affected by the glow blur!-->
                        <ContentPresenter Focusable="False"
                                          Margin="{TemplateBinding Padding}"
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                    </Grid>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Stroke" TargetName="border"
                                    Value="{DynamicResource DukNuk.Colors.Brush.Border.Light.Bright}" />
                            <Setter Property="Effect" TargetName="border"
                                    Value="{DynamicResource DukNuk.Colors.Glow.Control.MouseOver}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Fill" TargetName="border"
                                    Value="{DynamicResource DukNuk.Colors.Brush.Background.Dark}" />
                            <Setter Property="Stroke" TargetName="border"
                                    Value="{DynamicResource DukNuk.Colors.Brush.Border.Light.Bright}" />
                            <Setter Property="Effect" TargetName="border"
                                    Value="{DynamicResource DukNuk.Colors.Glow.Control.MouseOver}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Stroke" TargetName="border"
                                    Value="{DynamicResource DukNuk.Colors.Brush.Border.Disabled}" />
                            <Setter Property="Effect" TargetName="border"
                                    Value="{DynamicResource DukNuk.Colors.Glow.Control.Disabled}" />
                            <Setter Property="Fill" TargetName="border"
                                    Value="{DynamicResource DukNuk.Colors.Brush.Background.Disabled}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <Style
        x:Key="DukNuk.Style.NukCounter.Base"
        TargetType="{x:Type controls:NukCounterBase}">

        <!-- <Setter Property="FocusVisualStyle" Value="{DynamicResource DukNuk.Style.FocusVisual}" /> -->
        <Setter Property="Focusable" Value="False" />

        <Setter Property="Background" Value="{DynamicResource DukNuk.Colors.Brush.Background.Medium.Bright}" />
        <Setter Property="BorderBrush" Value="{DynamicResource DukNuk.Colors.Brush.Border.Light}" />
        <Setter Property="Foreground" Value="{DynamicResource DukNuk.Colors.Brush.Text.Light}" />
        <Setter Property="ForegroundInvalidValue" Value="{DynamicResource DukNuk.Colors.Brush.Text.Error}"/>
        <Setter Property="BorderThickness" Value="{DynamicResource DukNuk.Size.Generic.ControlBorderThickness}" />

        <Setter Property="Padding" Value="0" />
        <Setter Property="Margin" Value="{DynamicResource DukNuk.Size.Generic.ControlMargin}" />
        <Setter Property="Height" Value="{DynamicResource DukNuk.Size.Generic.ButtonHeight}" />
        <Setter Property="Width" Value="Auto" />

        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type controls:NukCounterBase}">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition Width="Auto" />
                        </Grid.ColumnDefinitions>
                        <!-- Button Preview Mouse Up/Down and TextBox TextChanged are handled in code behind by launching the coresponding commands-->
                        <Button
                            Name="PART_buttonDec"
                            Grid.Column="0"
                            Style="{StaticResource DukNuk.Style.NukCounter.Button}"
                            Visibility="{TemplateBinding Property=ShowButtons, Converter={StaticResource DukNuk.Converter.Bool2Vis}}"
                            IsEnabled="{TemplateBinding ShowButtons}"
                            Margin="{DynamicResource DukNuk.Size.NukCounter.Button.Margin.Left}">
                            <Path x:Name="ArrowDown"
                                  Data="{DynamicResource DukNuk.Size.ScrollBar.ArrowDownGeometry}"
                                  Fill="{DynamicResource DukNuk.Colors.Brush.Background.Light}"
                                  Margin="4"
                                  Stretch="Uniform"
                                  RenderTransformOrigin="0.5,0.5">
                                <Path.RenderTransform>
                                    <RotateTransform Angle="90" />
                                </Path.RenderTransform>
                            </Path>
                        </Button>
                        <Button
                            Name="PART_buttonInc"
                            Grid.Column="2"
                            Style="{StaticResource DukNuk.Style.NukCounter.Button}"
                            Visibility="{TemplateBinding Property=ShowButtons, Converter={StaticResource DukNuk.Converter.Bool2Vis}}"
                            IsEnabled="{TemplateBinding ShowButtons}"
                            Margin="{DynamicResource DukNuk.Size.NukCounter.Button.Margin.Right}">
                            <Path x:Name="ArrowUp"
                                  Data="{DynamicResource DukNuk.Size.ScrollBar.ArrowDownGeometry}"
                                  Fill="{DynamicResource DukNuk.Colors.Brush.Background.Light}"
                                  Margin="4"
                                  Stretch="Uniform"
                                  RenderTransformOrigin="0.5,0.5">
                                <Path.RenderTransform>
                                    <RotateTransform Angle="-90" />
                                </Path.RenderTransform>
                            </Path>
                        </Button>
                        <TextBox
                            Name="PART_theTextBox" 
                            Grid.Column="1" Grid.Row="0"
                            Margin="0"
                            HorizontalAlignment="Stretch"
                            VerticalAlignment="Center"
                            HorizontalContentAlignment="Center"
                            VerticalContentAlignment="Center"
                            Foreground="{TemplateBinding Foreground}"
                            Text="{Binding ValueString, RelativeSource={RelativeSource TemplatedParent}, Mode=TwoWay}"
                            FontSize="{TemplateBinding FontSize}"
                            FontFamily="{TemplateBinding FontFamily}"
                            FontStyle="{TemplateBinding FontStyle}" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsStringValueValid" Value="False">
                            <Setter Property="Foreground" Value="{Binding ForegroundInvalidValue, RelativeSource={RelativeSource Self}}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style
        x:Key="{x:Type controls:NukCounterDouble}"
        TargetType="{x:Type controls:NukCounterDouble}"
        BasedOn="{StaticResource DukNuk.Style.NukCounter.Base}"/>
    
    <Style
        x:Key="{x:Type controls:NukCounterInt}"
        TargetType="{x:Type controls:NukCounterInt}"
        BasedOn="{StaticResource DukNuk.Style.NukCounter.Base}"/>
    
    <Style
        x:Key="{x:Type controls:NukCounterUint}"
        TargetType="{x:Type controls:NukCounterUint}"
        BasedOn="{StaticResource DukNuk.Style.NukCounter.Base}"/>
    
    <Style
        x:Key="{x:Type controls:NukCounterUlong}"
        TargetType="{x:Type controls:NukCounterUlong}"
        BasedOn="{StaticResource DukNuk.Style.NukCounter.Base}"/>
    
    <Style
        x:Key="{x:Type controls:NukCounterLong}"
        TargetType="{x:Type controls:NukCounterLong}"
        BasedOn="{StaticResource DukNuk.Style.NukCounter.Base}"/>
    
    
</ResourceDictionary>