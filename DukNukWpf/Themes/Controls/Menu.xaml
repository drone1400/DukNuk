<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
                    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
                    xmlns:controls="clr-namespace:DukNuk.Wpf.Controls"
                    xmlns:converters="clr-namespace:DukNuk.Wpf.Themes.Converters"
                    mc:Ignorable="d">
    <d:ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="pack://application:,,,/DukNukWpf;component/Themes/ThemeColors/DefaultBlue.xaml" />
        <ResourceDictionary Source="pack://application:,,,/DukNukWpf;component/Themes/ThemeSizes.xaml" />
    </d:ResourceDictionary.MergedDictionaries>

    <MenuScrollingVisibilityConverter x:Key="DukNuk.Converter.MenuScrollingVisibility" />
    <converters:NukCheckBoxPathConverter x:Key="DukNuk.Converter.Menu.CheckMark.Path" />

    <!-- ContextMenu -->
    <!-- <Style x:Key="ThemeStyleContextMenu" TargetType="{x:Type ContextMenu}"> -->
    <!--     <Setter Property="OverridesDefaultStyle" Value="True" /> -->
    <!--     <Setter Property="Grid.IsSharedSizeScope" Value="true" /> -->
    <!--     <Setter Property="HasDropShadow" Value="True" /> -->
    <!--     <Setter Property="Template"> -->
    <!--         <Setter.Value> -->
    <!--             <ControlTemplate TargetType="{x:Type ContextMenu}"> -->
    <!--                 <Border x:Name="Border" Background="{DynamicResource ThemeBrushBackgroundControlLevel1}" BorderThickness="1" BorderBrush="{DynamicResource ThemeBrushBorder}"> -->
    <!--                     <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Cycle" /> -->
    <!--                 </Border> -->
    <!--             </ControlTemplate> -->
    <!--         </Setter.Value> -->
    <!--     </Setter> -->
    <!-- </Style> -->

    <Style
        x:Key="{x:Static MenuItem.SeparatorStyleKey}"
        TargetType="{x:Type Separator}">
        <Setter Property="IsEnabled" Value="True" />
        <Setter Property="Margin" Value="{DynamicResource DukNuk.Size.Menu.Separator.Margin}" />
        <Setter Property="Foreground" Value="{DynamicResource DukNuk.Colors.Brush.Text.Light}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Separator}">
                    <Rectangle
                        x:Name="rectangle"
                        Height="1"
                        Margin="{TemplateBinding Margin}"
                        Fill="{TemplateBinding Foreground}" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>

        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Foreground"
                        Value="{DynamicResource DukNuk.Colors.Brush.Text.Light.Disabled}" />
            </Trigger>
        </Style.Triggers>
    </Style>


    <Style
        x:Key="DukNuk.Style.Menu.HeaderScrollViewerButton"
        TargetType="{x:Type RepeatButton}">
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="HorizontalAlignment" Value="Center" />
        <Setter Property="VerticalAlignment" Value="Center" />

        <Setter Property="Margin" Value="0" />
        <Setter Property="Padding" Value="1" />
        <Setter Property="Focusable" Value="false" />
        <Setter Property="IsTabStop" Value="false" />
        <Setter Property="Width" Value="Auto" />
        <Setter Property="Height" Value="Auto" />

        <Setter Property="Background" Value="{DynamicResource DukNuk.Colors.Brush.Background.Medium.Bright}" />
        <Setter Property="BorderBrush" Value="{DynamicResource DukNuk.Colors.Brush.Border.Light}" />
        <Setter Property="Foreground" Value="{DynamicResource DukNuk.Colors.Brush.Text.Light}" />
        <Setter Property="BorderThickness" Value="{DynamicResource DukNuk.Size.Generic.ControlBorderThickness}" />
        <Setter Property="Effect" Value="{DynamicResource DukNuk.Colors.Glow.Control}" />

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <ContentPresenter Focusable="False"
                                      Margin="{TemplateBinding Padding}"
                                      HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                      VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Effect"
                                    Value="{DynamicResource DukNuk.Colors.Glow.Control.MouseOver}" />
                            <Setter Property="BorderBrush"
                                    Value="{DynamicResource DukNuk.Colors.Brush.Border.MouseOver}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Effect"
                                    Value="{DynamicResource DukNuk.Colors.Glow.Control.MouseOver}" />
                            <Setter Property="BorderBrush"
                                    Value="{DynamicResource DukNuk.Colors.Brush.Border.Light.Bright}" />
                            <Setter Property="Background"
                                    Value="{DynamicResource DukNuk.Colors.Brush.Background.Dark.Bright}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Effect"
                                    Value="{DynamicResource DukNuk.Colors.Glow.Control.Disabled}" />
                            <Setter Property="BorderBrush"
                                    Value="{DynamicResource DukNuk.Colors.Brush.Border.Disabled}" />
                            <Setter Property="Background"
                                    Value="{DynamicResource DukNuk.Colors.Brush.Background.Disabled}" />
                            <Setter Property="Foreground"
                                    Value="{DynamicResource DukNuk.Colors.Brush.Text.Light.Disabled}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style
        x:Key="DukNuk.Style.Menu.ScrollViewer"
        TargetType="{x:Type controls:NukScrollViewer}">

        <Setter Property="Margin" Value="0" />
        <Setter Property="HorizontalScrollBarVisibility" Value="Hidden" />
        <Setter Property="VerticalScrollBarVisibility" Value="Auto" />
        <Setter Property="InvertMouseWheelAxes" Value="False" />
        <Setter Property="IgnoreKeyboardScrolling" Value="True" />
        <Setter Property="CanContentScroll" Value="True" />

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type controls:NukScrollViewer}">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*" />
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="*" />
                            <RowDefinition Height="Auto" />
                        </Grid.RowDefinitions>

                        <ScrollContentPresenter Grid.Row="1" Grid.Column="0"
                                                Content="{TemplateBinding ScrollViewer.Content}"
                                                CanContentScroll="{TemplateBinding CanContentScroll}" />

                        <RepeatButton
                            x:Name="ButtonUp"
                            Style="{DynamicResource DukNuk.Style.Menu.HeaderScrollViewerButton}"
                            Grid.Row="0" Grid.Column="0"
                            Margin="{TemplateBinding Padding}"
                            Command="{x:Static ScrollBar.LineUpCommand}"
                            CommandTarget="{Binding RelativeSource={RelativeSource TemplatedParent}}"
                            Focusable="False">
                            <RepeatButton.Visibility>
                                <MultiBinding
                                    FallbackValue="Visibility.Hidden"
                                    Converter="{StaticResource DukNuk.Converter.MenuScrollingVisibility}"
                                    ConverterParameter="0">
                                    <Binding RelativeSource="{RelativeSource TemplatedParent}"
                                             Path="ComputedVerticalScrollBarVisibility" />
                                    <Binding RelativeSource="{RelativeSource TemplatedParent}" Path="VerticalOffset" />
                                    <Binding RelativeSource="{RelativeSource TemplatedParent}" Path="ExtentHeight" />
                                    <Binding RelativeSource="{RelativeSource TemplatedParent}" Path="ViewportHeight" />
                                </MultiBinding>
                            </RepeatButton.Visibility>
                            <Path
                                StrokeThickness="{Binding BorderThickness, ElementName=ButtonUp}"
                                Stroke="{Binding BorderBrush, ElementName=ButtonUp}"
                                Fill="{Binding Background, ElementName=ButtonUp}"
                                Effect="{Binding Effect, ElementName=ButtonUp}"
                                Data="{DynamicResource DukNuk.Size.TabControl.Vertical.ButtonPath}"
                                Stretch="None" />
                        </RepeatButton>
                        <RepeatButton
                            x:Name="ButtonDown"
                            Style="{DynamicResource DukNuk.Style.Menu.HeaderScrollViewerButton}"
                            Grid.Row="2" Grid.Column="0"
                            Margin="{TemplateBinding Padding}"
                            Command="{x:Static ScrollBar.LineDownCommand}"
                            CommandTarget="{Binding RelativeSource={RelativeSource TemplatedParent}}"
                            Focusable="False">
                            <RepeatButton.Visibility>
                                <MultiBinding
                                    FallbackValue="Visibility.Hidden"
                                    Converter="{StaticResource DukNuk.Converter.MenuScrollingVisibility}"
                                    ConverterParameter="100">
                                    <Binding RelativeSource="{RelativeSource TemplatedParent}"
                                             Path="ComputedVerticalScrollBarVisibility" />
                                    <Binding RelativeSource="{RelativeSource TemplatedParent}" Path="VerticalOffset" />
                                    <Binding RelativeSource="{RelativeSource TemplatedParent}" Path="ExtentHeight" />
                                    <Binding RelativeSource="{RelativeSource TemplatedParent}" Path="ViewportHeight" />
                                </MultiBinding>
                            </RepeatButton.Visibility>
                            <Path
                                StrokeThickness="{Binding BorderThickness, ElementName=ButtonDown}"
                                Stroke="{Binding BorderBrush, ElementName=ButtonDown}"
                                Fill="{Binding Background, ElementName=ButtonDown}"
                                Effect="{Binding Effect, ElementName=ButtonDown}"
                                Data="{DynamicResource DukNuk.Size.TabControl.Vertical.ButtonPath}"
                                Stretch="None"
                                RenderTransformOrigin="0.5,0.5">
                                <Path.RenderTransform>
                                    <RotateTransform Angle="180" />
                                </Path.RenderTransform>
                            </Path>
                        </RepeatButton>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!-- -->
    <!-- <Style x:Key="ThemeStyleMenuScrollViewer" TargetType="{x:Type ScrollViewer}" BasedOn="{x:Null}"> -->
    <!--     <Setter Property="HorizontalScrollBarVisibility" Value="Hidden" /> -->
    <!--     <Setter Property="VerticalScrollBarVisibility" Value="Auto" /> -->
    <!-- -->
    <!--     <Setter Property="Template"> -->
    <!--         <Setter.Value> -->
    <!--             <ControlTemplate TargetType="{x:Type ScrollViewer}"> -->
    <!--                 <Grid> -->
    <!--                     <Grid.ColumnDefinitions> -->
    <!--                         <ColumnDefinition Width="*" /> -->
    <!--                     </Grid.ColumnDefinitions> -->
    <!--                     <Grid.RowDefinitions> -->
    <!--                         <RowDefinition Height="Auto" /> -->
    <!--                         <RowDefinition Height="*" /> -->
    <!--                         <RowDefinition Height="Auto" /> -->
    <!--                     </Grid.RowDefinitions> -->
    <!--                     <Border Grid.Row="1" Grid.Column="0"> -->
    <!--                         <ScrollContentPresenter Margin="{TemplateBinding Padding}" /> -->
    <!--                     </Border> -->
    <!--                     <RepeatButton Style="{DynamicResource ThemeStyleScrollBarButton}" -->
    <!--                                   Grid.Row="0" -->
    <!--                                   Grid.Column="0" -->
    <!--                                   Command="{x:Static ScrollBar.LineUpCommand}" -->
    <!--                                   CommandTarget="{Binding RelativeSource={RelativeSource TemplatedParent}}" -->
    <!--                                   Focusable="False"> -->
    <!--                         <RepeatButton.Visibility> -->
    <!--                             <MultiBinding FallbackValue="Visibility.Collapsed" -->
    <!--                                           Converter="{StaticResource DukNuk.Converter.MenuScrollingVisibility}" -->
    <!--                                           ConverterParameter="0"> -->
    <!--                                 <Binding RelativeSource="{RelativeSource TemplatedParent}" -->
    <!--                                          Path="ComputedVerticalScrollBarVisibility" /> -->
    <!--                                 <Binding RelativeSource="{RelativeSource TemplatedParent}" Path="VerticalOffset" /> -->
    <!--                                 <Binding RelativeSource="{RelativeSource TemplatedParent}" Path="ExtentHeight" /> -->
    <!--                                 <Binding RelativeSource="{RelativeSource TemplatedParent}" Path="ViewportHeight" /> -->
    <!--                             </MultiBinding> -->
    <!--                         </RepeatButton.Visibility> -->
    <!--                         <Path x:Name="ArrowTop" -->
    <!--                               Data="M 0,4 C0,4 0,6 0,6 0,6 3.5,2.5 3.5,2.5 3.5,2.5 7,6 7,6 7,6 7,4 7,4 7,4 3.5,0.5 3.5,0.5 3.5,0.5 0,4 0,4 z" -->
    <!--                               Fill="{DynamicResource ThemeBrushText}" -->
    <!--                               Margin="3,4,3,3" -->
    <!--                               Stretch="Uniform" /> -->
    <!--                     </RepeatButton> -->
    <!--                     <RepeatButton Style="{DynamicResource ThemeStyleScrollBarButton}" -->
    <!--                                   Grid.Row="2" Grid.Column="0" -->
    <!--                                   Command="{x:Static ScrollBar.LineDownCommand}" -->
    <!--                                   CommandTarget="{Binding RelativeSource={RelativeSource TemplatedParent}}" -->
    <!--                                   Focusable="False"> -->
    <!--                         <RepeatButton.Visibility> -->
    <!--                             <MultiBinding FallbackValue="Visibility.Collapsed" -->
    <!--                                           Converter="{StaticResource DukNuk.Converter.MenuScrollingVisibility}" -->
    <!--                                           ConverterParameter="100"> -->
    <!--                                 <Binding RelativeSource="{RelativeSource TemplatedParent}" -->
    <!--                                          Path="ComputedVerticalScrollBarVisibility" /> -->
    <!--                                 <Binding RelativeSource="{RelativeSource TemplatedParent}" Path="VerticalOffset" /> -->
    <!--                                 <Binding RelativeSource="{RelativeSource TemplatedParent}" Path="ExtentHeight" /> -->
    <!--                                 <Binding RelativeSource="{RelativeSource TemplatedParent}" Path="ViewportHeight" /> -->
    <!--                             </MultiBinding> -->
    <!--                         </RepeatButton.Visibility> -->
    <!--                         <Path x:Name="ArrowBottom" -->
    <!--                               Data="M 0,2.5 C0,2.5 0,0.5 0,0.5 0,0.5 3.5,4 3.5,4 3.5,4 7,0.5 7,0.5 7,0.5 7,2.5 7,2.5 7,2.5 3.5,6 3.5,6 3.5,6 0,2.5 0,2.5 z" -->
    <!--                               Fill="{DynamicResource ThemeBrushText}" -->
    <!--                               Margin="3,4,3,3" -->
    <!--                               Stretch="Uniform" /> -->
    <!--                     </RepeatButton> -->
    <!--                 </Grid> -->
    <!--             </ControlTemplate> -->
    <!--         </Setter.Value> -->
    <!--     </Setter> -->
    <!-- </Style> -->

    <!-- TopLevelHeader -->
    <ControlTemplate
        x:Key="{x:Static MenuItem.TopLevelHeaderTemplateKey}"
        TargetType="{x:Type MenuItem}">
        <Grid>
            <Border
                x:Name="Border"
                Background="Transparent"
                BorderBrush="Transparent"
                BorderThickness="{DynamicResource DukNuk.Size.Generic.ControlBorderThickness}"
                CornerRadius="{DynamicResource DukNuk.Size.Generic.ControlCornerRadius}" />
            <ContentPresenter
                x:Name="HeaderHost"
                VerticalAlignment="Center"
                Margin="{DynamicResource DukNuk.Size.Menu.TopLevel.Margin}"
                ContentSource="Header"
                TextElement.Foreground="{TemplateBinding Foreground}"
                RecognizesAccessKey="True" />
            <Popup x:Name="Popup"
                   Placement="Bottom"
                   IsOpen="{TemplateBinding IsSubmenuOpen}"
                   AllowsTransparency="True"
                   Focusable="False"
                   PopupAnimation="Fade">
                <Border x:Name="SubmenuBorder"
                        Background="{DynamicResource DukNuk.Colors.Brush.Background.Dark}"
                        BorderBrush="{DynamicResource DukNuk.Colors.Brush.Border.Light}"
                        BorderThickness="{DynamicResource DukNuk.Size.Generic.ControlBorderThickness}"
                        CornerRadius="{DynamicResource DukNuk.Size.Generic.ControlCornerRadius}">
                    <controls:NukScrollViewer Style="{DynamicResource DukNuk.Style.Menu.ScrollViewer}">
                        <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Cycle" />
                    </controls:NukScrollViewer>
                </Border>
            </Popup>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsSuspendingPopupAnimation" Value="true">
                <Setter TargetName="Popup" Property="PopupAnimation" Value="None" />
            </Trigger>
            <Trigger Property="IsHighlighted" Value="true">
                <Setter Property="Effect" TargetName="Border"
                        Value="{DynamicResource DukNuk.Colors.Glow.Control.MouseOver}" />
                <Setter Property="BorderBrush" TargetName="Border"
                        Value="{DynamicResource DukNuk.Colors.Brush.Border.MouseOver}" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!-- TopLevelItem -->
    <ControlTemplate
        x:Key="{x:Static MenuItem.TopLevelItemTemplateKey}"
        TargetType="{x:Type MenuItem}">
        <Grid>
            <Border
                x:Name="Border"
                Background="Transparent"
                BorderBrush="Transparent"
                BorderThickness="{DynamicResource DukNuk.Size.Generic.ControlBorderThickness}"
                CornerRadius="{DynamicResource DukNuk.Size.Generic.ControlCornerRadius}" />
            <ContentPresenter
                x:Name="HeaderHost"
                VerticalAlignment="Center"
                Margin="{DynamicResource DukNuk.Size.Menu.TopLevel.Margin}"
                ContentSource="Header"
                TextElement.Foreground="{TemplateBinding Foreground}"
                RecognizesAccessKey="True" />
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsHighlighted" Value="true">
                <Setter Property="Effect" TargetName="Border"
                        Value="{DynamicResource DukNuk.Colors.Glow.Control.MouseOver}" />
                <Setter Property="BorderBrush" TargetName="Border"
                        Value="{DynamicResource DukNuk.Colors.Brush.Border.MouseOver}" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!-- SubmenuItem -->
    <ControlTemplate
        x:Key="{x:Static MenuItem.SubmenuItemTemplateKey}"
        TargetType="{x:Type MenuItem}">

        <Grid>
            <Grid.ColumnDefinitions>
                <ColumnDefinition MinWidth="{DynamicResource DukNuk.Size.Menu.SubMenu.Icon.MinWidth}"
                                  Width="Auto" SharedSizeGroup="Icon" />
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="Auto" SharedSizeGroup="Shortcut" />
                <ColumnDefinition MinWidth="{DynamicResource DukNuk.Size.Menu.SubMenu.InputGesture.MinWidth}"
                                  Width="Auto" />
            </Grid.ColumnDefinitions>


            <Border
                x:Name="Border"
                Grid.Column="0" Grid.ColumnSpan="4"
                Background="Transparent"
                BorderBrush="Transparent"
                BorderThickness="{DynamicResource DukNuk.Size.Generic.ControlBorderThickness}"
                CornerRadius="{DynamicResource DukNuk.Size.Generic.ControlCornerRadius}" />

            <ContentPresenter
                x:Name="Icon"
                Grid.Column="0"
                Margin="{DynamicResource DukNuk.Size.Menu.SubMenu.Icon.Margin }"
                VerticalAlignment="Center"
                ContentSource="Icon" />


            <Canvas
                Grid.Column="0"
                Width="{DynamicResource DukNuk.Size.Menu.SubMenu.CheckMark.Size}"
                Height="{DynamicResource DukNuk.Size.Menu.SubMenu.CheckMark.Size}">
                <Path
                    x:Name="CheckMark"
                    HorizontalAlignment="Center"
                    VerticalAlignment="Center"
                    Fill="{TemplateBinding Foreground}"
                    Margin="1"
                    Stretch="None"
                    Visibility="Collapsed">
                    <Path.Data>
                        <MultiBinding
                            FallbackValue="M 0,0 L 0,1 L 1,1 L 1,0 Z"
                            Converter="{StaticResource DukNuk.Converter.Menu.CheckMark.Path}"
                            ConverterParameter="true">
                            <Binding RelativeSource="{RelativeSource AncestorType=Canvas}" Path="ActualHeight" />
                            <Binding RelativeSource="{RelativeSource AncestorType=Canvas}" Path="ActualHeight" />
                        </MultiBinding>
                    </Path.Data>
                </Path>
            </Canvas>

            <ContentPresenter
                x:Name="HeaderHost"
                Grid.Column="1"
                Margin="{DynamicResource DukNuk.Size.Menu.SubMenu.ContentMargin }"
                VerticalAlignment="Center"
                ContentSource="Header"
                RecognizesAccessKey="True" />
            <TextBlock
                x:Name="InputGestureText"
                Grid.Column="2"
                VerticalAlignment="Center"
                Text="{TemplateBinding InputGestureText}"
                Margin="{DynamicResource DukNuk.Size.Menu.SubMenu.InputGesture.Margin }"
                DockPanel.Dock="Right" />
        </Grid>

        <ControlTemplate.Triggers>
            <Trigger Property="ButtonBase.Command" Value="{x:Null}" />
            <Trigger Property="Icon" Value="{x:Null}">
                <Setter TargetName="Icon" Property="Visibility" Value="Hidden" />
            </Trigger>
            <Trigger Property="IsChecked" Value="true">
                <Setter TargetName="CheckMark" Property="Visibility" Value="Visible" />
            </Trigger>
            <Trigger Property="IsCheckable" Value="true">
                <Setter TargetName="Icon" Property="Visibility" Value="Hidden" />
            </Trigger>
            <Trigger Property="IsHighlighted" Value="true">
                <Setter Property="Effect" TargetName="Border"
                        Value="{DynamicResource DukNuk.Colors.Glow.Control.MouseOver}" />
                <Setter Property="BorderBrush" TargetName="Border"
                        Value="{DynamicResource DukNuk.Colors.Brush.Border.MouseOver}" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate
        x:Key="{x:Static MenuItem.SubmenuHeaderTemplateKey}"
        TargetType="{x:Type MenuItem}">
        <Grid>
            <Grid.ColumnDefinitions>
                <ColumnDefinition MinWidth="{DynamicResource DukNuk.Size.Menu.SubMenu.Icon.MinWidth}"
                                  Width="Auto" SharedSizeGroup="Icon" />
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="Auto" SharedSizeGroup="Shortcut" />
                <ColumnDefinition MinWidth="{DynamicResource DukNuk.Size.Menu.SubMenu.InputGesture.MinWidth}"
                                  Width="Auto" />
            </Grid.ColumnDefinitions>

            <Border
                x:Name="Border"
                Grid.Column="0" Grid.ColumnSpan="4"
                Background="Transparent"
                BorderBrush="Transparent"
                BorderThickness="{DynamicResource DukNuk.Size.Generic.ControlBorderThickness}"
                CornerRadius="{DynamicResource DukNuk.Size.Generic.ControlCornerRadius}" />

            <ContentPresenter
                x:Name="Icon"
                Grid.Column="0"
                Margin="{DynamicResource DukNuk.Size.Menu.SubMenu.Icon.Margin }"
                VerticalAlignment="Center"
                ContentSource="Icon" />
            <ContentPresenter
                x:Name="HeaderHost"
                Grid.Column="1"
                Margin="{DynamicResource DukNuk.Size.Menu.SubMenu.ContentMargin }"
                VerticalAlignment="Center"
                ContentSource="Header"
                RecognizesAccessKey="True" />
            <TextBlock
                x:Name="InputGestureText"
                Grid.Column="2"
                VerticalAlignment="Center"
                Text="{TemplateBinding InputGestureText}"
                Margin="{DynamicResource DukNuk.Size.Menu.SubMenu.InputGesture.Margin }"
                DockPanel.Dock="Right" />
            <Path
                Grid.Column="3"
                HorizontalAlignment="Center"
                VerticalAlignment="Center"
                Data="M 0 0 L 0 7 L 4 3.5 Z"
                Fill="{TemplateBinding Foreground}" />
            <Popup
                x:Name="Popup"
                Grid.Column="0"
                Placement="Right"
                HorizontalOffset="-4"
                IsOpen="{TemplateBinding IsSubmenuOpen}"
                AllowsTransparency="True"
                Focusable="False"
                PopupAnimation="Fade">
                <Border x:Name="SubmenuBorder"
                        Background="{DynamicResource DukNuk.Colors.Brush.Background.Dark}"
                        BorderBrush="{DynamicResource DukNuk.Colors.Brush.Border.Light}"
                        BorderThickness="{DynamicResource DukNuk.Size.Generic.ControlBorderThickness}"
                        CornerRadius="{DynamicResource DukNuk.Size.Generic.ControlCornerRadius}">
                    <controls:NukScrollViewer Style="{DynamicResource DukNuk.Style.Menu.ScrollViewer}">
                        <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Cycle" />
                    </controls:NukScrollViewer>
                </Border>
            </Popup>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="Icon" Value="{x:Null}">
                <Setter TargetName="Icon" Property="Visibility" Value="Collapsed" />
            </Trigger>
            <Trigger Property="IsHighlighted" Value="true">
                <Setter Property="Effect" TargetName="Border"
                        Value="{DynamicResource DukNuk.Colors.Glow.Control.MouseOver}" />
                <Setter Property="BorderBrush" TargetName="Border"
                        Value="{DynamicResource DukNuk.Colors.Brush.Border.MouseOver}" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!-- MenuItem -->
    <Style
        x:Key="{x:Type MenuItem}"
        TargetType="{x:Type MenuItem}">

        <Setter Property="FocusVisualStyle" Value="{DynamicResource DukNuk.Style.FocusVisual}" />

        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="Foreground" Value="{DynamicResource DukNuk.Colors.Brush.Text.Light}" />
        <Setter Property="BorderThickness" Value="0" />

        <Setter Property="HorizontalContentAlignment"
                Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
        <Setter Property="VerticalContentAlignment"
                Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />

        <Setter Property="ScrollViewer.PanningMode" Value="Both" />
        <Setter Property="Stylus.IsFlicksEnabled" Value="False" />

        <Setter Property="Margin" Value="0" />
        <Setter Property="Padding" Value="0" />

        <Setter Property="Template"
                Value="{DynamicResource {ComponentResourceKey ResourceId=SubmenuItemTemplateKey, TypeInTargetAssembly={x:Type MenuItem}}}" />
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground"
                        Value="{DynamicResource DukNuk.Colors.Brush.Text.Light.Disabled}" />
            </Trigger>

            <Trigger Property="Role" Value="TopLevelHeader">
                <Setter Property="Template"
                        Value="{DynamicResource {ComponentResourceKey ResourceId=TopLevelHeaderTemplateKey, TypeInTargetAssembly={x:Type MenuItem}}}" />
                <Setter Property="Padding" Value="6,0" />
            </Trigger>
            <Trigger Property="Role" Value="TopLevelItem">
                <Setter Property="Template"
                        Value="{DynamicResource {ComponentResourceKey ResourceId=TopLevelItemTemplateKey, TypeInTargetAssembly={x:Type MenuItem}}}" />
                <Setter Property="Padding" Value="6,0" />
            </Trigger>
            <Trigger Property="Role" Value="SubmenuHeader">
                <Setter Property="Template"
                        Value="{DynamicResource {ComponentResourceKey ResourceId=SubmenuHeaderTemplateKey, TypeInTargetAssembly={x:Type MenuItem}}}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- Menu -->
    <Style
        x:Key="{x:Type Menu}"
        TargetType="{x:Type Menu}">

        <Setter Property="Foreground" Value="{DynamicResource DukNuk.Colors.Brush.Text.Light}" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="BorderThickness" Value="{DynamicResource DukNuk.Size.Generic.ControlBorderThickness}" />

        <!-- <Setter Property="FontFamily" Value="{DynamicResource {x:Static SystemFonts.MenuFontFamilyKey}}" /> -->
        <!-- <Setter Property="FontSize" Value="{DynamicResource {x:Static SystemFonts.MenuFontSizeKey}}" /> -->
        <!-- <Setter Property="FontStyle" Value="{DynamicResource {x:Static SystemFonts.MenuFontStyleKey}}" /> -->
        <!-- <Setter Property="FontWeight" Value="{DynamicResource {x:Static SystemFonts.MenuFontWeightKey}}" /> -->

        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Menu}">
                    <Border BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Background="{TemplateBinding Background}"
                            Padding="{TemplateBinding Padding}">
                        <ItemsPresenter />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

</ResourceDictionary>